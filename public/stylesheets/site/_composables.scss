//show or hide items at different breakpoints
.show-tablet {
	display: none;

	@media all and (max-width: $bp-md) {
		display: block;
	}
}

.show-mobile {
	display: none;

	@media all and (max-width: $bp-sm) {
		display: block;
	}
}

@media all and (max-width: $bp-lg) {
	.hide-large {
		display: none;
	}
}

@media all and (max-width: $bp-md) {
	.hide-tablet {
		display: none;
	}
}

@media all and (max-width: $bp-sm) {
	.hide-mobile {
		display: none;
	}
}

//use border-radius to create a circle shape
.border-circle {
	border-radius: 100%;
}

//force element to fill container height/width
.max-height {
	height: 100%;
}

.max-width {
	width: 100%;
}

//center elements horizontally and/or vertically 
.vertical-align {
	position: relative;
	top: 50%;
	transform: translateY(-50%);
}

.horizontal-align {
	position: relative;
	left: 50%;
	transform: translateX(-50%);
}

.transform-center {
	position: relative;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

.horizontal-align-absolute {
	position: absolute;
	left: 50%;
	transform: translateX(-50%);
}

.vertical-align-absolute {
	position: absolute;
	top: 50%;
	transform: translateY(-50%);
}

.transform-center-absolute {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

.horizontal-align-fixed {
	position: fixed;
	left: 50%;
	transform: translateX(-50%);
}

.vertical-align-fixed {
	position: fixed;
	top: 50%;
	transform: translateY(-50%);
}

.transform-center-fixed {
	position: fixed;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

// use a checkbox to show and hide sibling elements with target class
.toggle-sibling {
	display: none;
}

.toggle-sibling ~ .toggle-sibling-target {
	display: none;
}

.toggle-sibling:checked ~ .toggle-sibling-target {
	display: block;
}

//flex styles
.flex-box {
	display: flex;
}

.flex-box-inline {
	display: inline-flex;
}

//transforms
.rotateZ45 {
	transform: rotateZ(45deg);
}
.rotateZ90 {
	transform: rotateZ(90deg);
}
.scale50 {
	transform: scale(.5, .5); 
}
.scale150 {
	transform: scale(1.5, 1.5); 
}
.scale200 {
	transform: scale(2, 2); 
}

//transition settings
.transition-opacity {
	transition: opacity .3s;
}

.transition-color {
	transition: color .3s;
}

.transition-background {
	transition: background .3s;
}

.transition-transform {
	transition: transform .3s;
}

.transition-top {
	transition: top .3s;
}

.transition-left {
	transition: left .3s;
}

.transition-right {
	transition: right .3s;
}

.transition-bottom {
	transition: bottom .3s;
}

.transition-all {
	transition: all .3s;
}

.background-transparent {
	background:transparent;
}